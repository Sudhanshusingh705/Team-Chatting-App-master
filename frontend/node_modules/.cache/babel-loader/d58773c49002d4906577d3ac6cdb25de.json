{"ast":null,"code":"// Fallback locale.\n// (when not a single one of the supplied \"preferred\" locales is available)\nvar defaultLocale = 'en'; // For all locales added\n// their relative time formatter messages will be stored here.\n\nvar localesData = {}; // According to the spec BCP 47 language tags are case-insensitive.\n// https://tools.ietf.org/html/rfc5646\n\nvar lowercaseLocaleLookup = {};\nexport function getDefaultLocale() {\n  return defaultLocale;\n}\nexport function setDefaultLocale(locale) {\n  defaultLocale = locale;\n}\n/**\r\n * Gets locale data previously added by `addLocaleData()`.\r\n * @return  {object} [localeData]\r\n */\n\nexport function getLocaleData(locale) {\n  return localesData[locale];\n}\n/**\r\n * Adds locale data.\r\n * Is called by `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {object} localeData\r\n */\n\nexport function addLocaleData(localeData) {\n  if (!localeData) {\n    throw new Error('No locale data passed');\n  } // This locale data is stored in a global variable\n  // and later used when calling `.format(time)`.\n\n\n  localesData[localeData.locale] = localeData;\n  lowercaseLocaleLookup[localeData.locale.toLowerCase()] = localeData.locale;\n}\n/**\r\n * Returns a locale for which locale data has been added\r\n * via `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n */\n\nexport function resolveLocale(locale) {\n  if (localesData[locale]) {\n    return locale;\n  }\n\n  if (lowercaseLocaleLookup[locale.toLowerCase()]) {\n    return lowercaseLocaleLookup[locale.toLowerCase()];\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,IAAIA,aAAa,GAAG,IAApB,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAG,EAApB,C,CAEA;AACA;;AACA,IAAMC,qBAAqB,GAAG,EAA9B;AAEA,OAAO,SAASC,gBAAT,GAA4B;EACjC,OAAOH,aAAP;AACD;AAED,OAAO,SAASI,gBAAT,CAA0BC,MAA1B,EAAkC;EACvCL,aAAa,GAAGK,MAAhBL;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASM,aAAT,CAAuBD,MAAvB,EAA+B;EACrC,OAAOJ,WAAW,CAACI,MAAD,CAAlB;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAuBC,UAAvB,EAAmC;EACxC,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;EAFsC,EAIxC;EACA;;;EACAR,WAAW,CAACO,UAAU,CAACH,MAAZ,CAAXJ,GAAiCO,UAAjCP;EACAC,qBAAqB,CAACM,UAAU,CAACH,MAAXG,CAAkBE,WAAlBF,EAAD,CAArBN,GAAyDM,UAAU,CAACH,MAApEH;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,aAAT,CAAuBN,MAAvB,EAA+B;EACrC,IAAIJ,WAAW,CAACI,MAAD,CAAf,EAAyB;IACxB,OAAOA,MAAP;EACA;;EACD,IAAIH,qBAAqB,CAACG,MAAM,CAACK,WAAPL,EAAD,CAAzB,EAAiD;IAChD,OAAOH,qBAAqB,CAACG,MAAM,CAACK,WAAPL,EAAD,CAA5B;EACA;AACD","names":["defaultLocale","localesData","lowercaseLocaleLookup","getDefaultLocale","setDefaultLocale","locale","getLocaleData","addLocaleData","localeData","Error","toLowerCase","resolveLocale"],"sources":["C:\\Users\\hp\\Downloads\\Team-Chatting-App-master\\frontend\\node_modules\\relative-time-format\\source\\LocaleDataStore.js"],"sourcesContent":["// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\n// According to the spec BCP 47 language tags are case-insensitive.\r\n// https://tools.ietf.org/html/rfc5646\r\nconst lowercaseLocaleLookup = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n/**\r\n * Gets locale data previously added by `addLocaleData()`.\r\n * @return  {object} [localeData]\r\n */\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\n/**\r\n * Adds locale data.\r\n * Is called by `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {object} localeData\r\n */\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n  lowercaseLocaleLookup[localeData.locale.toLowerCase()] = localeData.locale\r\n}\r\n\r\n/**\r\n * Returns a locale for which locale data has been added\r\n * via `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n */\r\nexport function resolveLocale(locale) {\r\n\tif (localesData[locale]) {\r\n\t\treturn locale\r\n\t}\r\n\tif (lowercaseLocaleLookup[locale.toLowerCase()]) {\r\n\t\treturn lowercaseLocaleLookup[locale.toLowerCase()]\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}